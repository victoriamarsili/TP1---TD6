git push
install.packages("githubinstall")
library(readr)
spotify_data <- read_csv("spotify_data.csv")
View(spotify_data)
library(readr)
cleaned_dataset <- read_csv("cleaned_dataset.csv")
View(cleaned_dataset)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
library(readr)
datos <- read_csv("cleaned_dataset.csv")
View(cleaned_dataset)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
datos = read.csv("spotify_data.csv")
library(readr)
datos <- read_csv("cleaned_dataset.csv")
View(cleaned_dataset)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
datos = read.csv("spotify_data.csv")
library(readr)
datos <- read_csv("cleaned_dataset.csv")
View(datos)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
hist(datos$popularity)
mean(datos$popularity)
str(train)
plot(datos)
View(datos)
View(muestra)
plot(datos$popularity)
plot(datos$danceability)
plot(datos$danceability)
plot(mean(datos$danceability))
plot(datos$danceability)
plot(datos$danceability)
lines(mean(datos$danceability))
plot(datos$danceability)
lines(datos$danceability)
plot(datos$danceability)
plot(datos$danceability)
lines(mean(datos$danceability))
plot(datos$danceability)
plot(datos$danceability)
lines(mean(datos$danceability), color = red)
plot(datos$danceability)
lines(mean(datos$danceability), color = "red")
plot(datos$danceability)
lines(mean(datos$danceability), colour = "red")
plot(datos$danceability)
lines(mean(datos$danceability), col = "red")
lines(mean(datos$danceability), col = "red")
# Plotting the danceability values
plot(datos$danceability, type = "p", main = "Danceability Plot", xlab = "Index", ylab = "Danceability")
# Calculating the mean of danceability
mean_danceability <- mean(datos$danceability, na.rm = TRUE)
# Adding a horizontal line at the mean value
abline(h = mean_danceability, col = "red", lwd = 2)
# Optional: Add a legend to indicate the mean line
legend("topright", legend = paste("Mean =", round(mean_danceability, 2)), col = "red", lwd = 2)
# Scatter plot of danceability vs. energy
plot(datos$danceability, datos$energy,
main = "Danceability vs. Energy",
xlab = "Danceability",
ylab = "Energy",
pch = 19,         # Use solid circles for points
col = "blue")     # Color of the points
# Optional: Add a linear regression line to see the trend
abline(lm(datos$energy ~ datos$danceability), col = "red", lwd = 2)
# Optional: Add a legend
legend("topright", legend = "Regression Line", col = "red", lwd = 2)
# Scatter plot of danceability vs. energy
plot(datos$danceability, datos$energy)
cor_matrix <- cor(datos[, c("danceability", "duration")], use = "complete.obs")
cor_matrix <- cor(datos[, c("danceability", "duration_ms")], use = "complete.obs")
print(cor_matrix)
cor_matrix <- cor(datos[, c("danceability", "duration_ms")], use = "complete.obs")
print(cor_matrix)
library(corrplot)
cor_matrix <- cor(datos[, c("danceability", "duration_ms")], use = "complete.obs")
print(cor_matrix)
install.packages("corrplot")
library(corrplot)
# Plot the correlation matrix
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.col = "black", tl.srt = 45, title = "Correlation Matrix")
library(readr)
datos <- read_csv("cleaned_dataset.csv",col_select =-c(track_id,artists,album_name,track_name))
View(datos)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
hist(datos$danceability)
hist(datos$danceability)
summary(datos)
plot(datos)
# Calcular estadísticas descriptivas
estadisticas <- muestra %>%
summarise(
media = mean(variable_principal, na.rm = TRUE),
mediana = median(variable_principal, na.rm = TRUE),
desviacion_estandar = sd(variable_principal, na.rm = TRUE),
minimo = min(variable_principal, na.rm = TRUE),
library(readr)
datos <- read_csv("cleaned_dataset.csv",col_select =-c(track_id,artists,album_name,track_name))
View(datos)
set.seed(12182018)
if (nrow(datos) >= 50000) {
# Crear un vector de índices aleatorios
indices <- sample(1:nrow(datos), 50000)
# Seleccionar las filas correspondientes a esos índices
muestra <- datos[indices, ]
# Verificar el tamaño de la muestra
nrow(muestra)
}
# Calcular estadísticas descriptivas
estadisticas <- muestra %>%
summarise(
media = mean(variable_principal, na.rm = TRUE),
mediana = median(variable_principal, na.rm = TRUE),
desviacion_estandar = sd(variable_principal, na.rm = TRUE),
minimo = min(variable_principal, na.rm = TRUE),
maximo = max(variable_principal, na.rm = TRUE)
)
```{r}a
install.packages("dplyr")
# Calcular estadísticas descriptivas
estadisticas <- muestra %>%
summarise(
media = mean(variable_principal, na.rm = TRUE),
mediana = median(variable_principal, na.rm = TRUE),
desviacion_estandar = sd(variable_principal, na.rm = TRUE),
minimo = min(variable_principal, na.rm = TRUE),
maximo = max(variable_principal, na.rm = TRUE)
)
# Calcular estadísticas descriptivas
summary(muestra)
# Calcular estadísticas descriptivas
summary(muestra$popularity)
# Calcular estadísticas descriptivas
summary(muestra$duration_ms)
summary(muestra$explicit)
summary(muestra$danceability)
# Apply summary to each column in the dataset
sapply(muestra, summary)
plot(muestra)
install.packages(skimr)
install.packages("skimr")
skimr(muestra)
skim(muestra)
skim(muestra)
library(skimr)
skim(muestra)
